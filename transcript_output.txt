When you write something wrong in JavaScript, you get an error and the different types and kinds and forms and examples of errors that you can get in JavaScript. But in this video, I'll be simplifying the three major types of errors that you can get when you're writing JavaScript code. The three major types of errors in JavaScript are number one syntax errors. These are errors that occur when the written code doesn't fit the syntax of JavaScript. Secondly, we have runtime errors, which are errors that occur when the program is being run. And lastly, we have logical errors, which are errors that occur when the syntax is actually correct, but the intended logic is not. Now let's look at some examples of these types of errors. Let's start from the syntax errors. As you know, in JavaScript, the different things you want to do have a syntax. If you want to create a function, there's a syntax for that loops, there's a syntax for that if you want to declare a variable if you want to do if statement switch statement, there is a syntax for that. Now we are trying to do any of these things and you do not follow the syntax, then we get a syntax error. Let's say you want to declare a function. Now you know when declaring a function, you have the function keyword, then you have the function name, let's call this print, then you have parentheses, and then you have curly brackets. And then you have the code of that function. But let's see after the function keyword, you do not provide a name after the function keyword, you just have parentheses like this. And this is syntactically wrong. If we try to execute this JavaScript file, see we have an error, it says here syntax error function statements require a function name, the syntax for creating functions is the function keyword and then a function name. But because we do not follow that syntax, now we have a syntax error. Now let's move on to the next one, which is runtime errors. These are errors that you do not know about until the program is being run. Let's say we have a function called print again. And in this function, we have the console object, and then we assess the log method. And then here we say hello. And here we execute this function. If I come here and I run this file, you see we have Hello, which is coming from here after this function was executed. But this console object does not have a logs method. It has log but it doesn't have a logs method. Now if I don't execute this function, let's say I comment it if I run this file, see we do not get any error, even though we have something wrong in this function, which is a logs method that does not exist on this console object, we will not know about it until we actually execute the function. So if I come here and I execute this function, and I come here and I run this same file again, now we have an error it says console logs is not a function that's because the logs method does not exist on the console object. So this is an example of a runtime error. This type of runtime error is a type error, but it classifies a runtime error because that error occurred when the program was run. Now let's move on to the last type of error, which is logical error. Let's say we have a function again, and I'll call this function sum. And then this sum takes two arguments, which is num one parameter and num two parameter. And what this function is going to do is that we get the sum and then this sum should say num one plus num two, and then we'll return some then here we can say console dot log some 10 and 20. So this function is going to say 10 plus 20. If I run this, you see we have 30. Now this is the logic that we have intended for this sum function. But let's say this sum function while we're creating it, we probably mistakenly used minus or we use divide or we use multiply. Now if we come here, we run this file, the function says some we pass 10 or pass 20, we expect it to do 10 plus 20. But when I run this, you see we have 200 10 plus 20 is not 200. Now this is an error in this particular error JavaScript does not throw an error because we are the ones who told JavaScript what to do in this function. But this is classified as a logical error because the syntax here is correct. JavaScript sees this as a valid function. Also, there is no error that we get when the code is being run or the intended logic has an error. The intended logic of this function is to add these numbers. But now we have multiplied these numbers. And probably you have had something like this that logical errors can be hard to find. Because with syntax error, we can easily identify where we have an invalid syntax with runtime errors, we can also identify where that error is coming from, just as we saw in the console. But with logical errors, the console as you can see here, it doesn't give any error. So these are the three major types of errors that we have in JavaScript and then many other forms and examples of errors can fall on that is three types. If you enjoyed this video, please give it a like share and also subscribe for more concepts I'll be simplifying in JavaScript. Transcribed by https://otter.ai